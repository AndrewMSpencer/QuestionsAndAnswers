<?xml version='1.0' encoding='utf-8'?>
<!-- Note, if this was a real security scenario there are several additional features to consider that are rather artificial w/ this simple console app implementation.  
1: SqlLite no longer supports password protecting/encrypting without additional libraries.  Since this db always has to travel with the console app, there's limited value in encrypting as the necessary key will be reverse-engineerable from the console app itself.
2: If this is going to live on a server instead of being a console app, best practice dictates encrypting appSettings and connectionStrings.  You can't really do that well in this test setting and retain code portability, but definitely enable encryption via machine key for web/container deployed applications.
-->
<configuration>
	<appSettings>
		<!-- SHA code for general obfuscation if this gets changed, any data entered prior to the change will be entirely unuseable and unrecoverable.-->
		<add key="globalSalt" value="303469a58370c7d4e55ebe0b4491ccecab2b7fb42ffc3800928409f3f18216db" />
		<!-- configurable -->
		<add key="expectedAnswers" value ="3"/>
		<add key="storageDB" value="DBFile\Local.db"/>
		
	</appSettings>
</configuration>

